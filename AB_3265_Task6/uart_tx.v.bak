// AstroTinker Bot : Task 2A : UART Transmitter
/*
Instructions
-------------------
Students are not allowed to make any changes in the Module declaration.

This file is used to generate UART Tx data packet to transmit the messages based on the input data.

Recommended Quartus Version : 20.1
The submitted project file must be 20.1 compatible as the evaluation will be done on Quartus Prime Lite 20.1.

Warning: The error due to compatibility will not be entertained.
-------------------
*/

/*
Module UART Transmitter

Input:  clk_50M - 50 MHz clock
        data    - 8-bit data line to transmit
Output: tx      - UART Transmission Line
*/

// module declaration
module uart_tx(
    input  clk_50M,
    input  [7:0] data,
    output reg tx
);

//////////////////DO NOT MAKE ANY CHANGES ABOVE THIS LINE//////////////////


		
	 localparam CLKS_PER_BIT	  = 434;
	 
    localparam IDLE_STATE       = 2'b00;
    localparam START_STATE      = 2'b01;
    localparam SEND_BIT_STATE   = 2'b10;
    localparam STOP_STATE       = 2'b11;

    reg [1:0] state             = 0;
    reg [15:0] counter          = 0;
    reg [2:0] bit_index         = 0;
    reg [7:0] data_byte         = 0;
//	 reg 			start				  = 1'b0;
//	reg 			start2			  = 1'b0;
 
	initial begin
	 tx = 0;
	 
   end 
//	always @(posedge clk_50M)
//		begin
//		data_byte <= data;
//		end

	 
	 always @(posedge clk_50M)
		begin
			case (state)
			
				IDLE_STATE :
					begin
//					data_byte <= data;

						if (data==0)
							begin
								
										tx 		<= 1;
										counter	<= 0;
										bit_index<= 0;
										state		<= IDLE_STATE;
									
							end
						else
							begin
							tx 		<= 0;
							counter	<= 0;
							bit_index<= 0;
							state		<= START_STATE;
							end
					end
					
				START_STATE :
					begin
						tx 		<= 0;
									if (counter < (CLKS_PER_BIT-2))
										begin
										counter <= counter + 16'b1;
										state <= START_STATE;
										end
									else
										begin
										counter <= 0;
										state <= SEND_BIT_STATE;
										end
                end
					
					
				SEND_BIT_STATE :
               begin
                  tx <= data[bit_index];

                  if (counter < CLKS_PER_BIT-1)
                     begin
                     counter <= counter + 16'b1;
                     state   <= SEND_BIT_STATE;
                     end
                  else
                     begin
                        counter <= 0;
                        //Check if we have sent out all bits
                        if (bit_index < 7)
                           begin
                           bit_index   <= bit_index + 3'b1;
                           state       <= SEND_BIT_STATE;
                           end
                        else
                           begin
                           bit_index <= 0;
                           state     <= STOP_STATE;
                           end
                     end
               end
						
						
					// Send Stop bit
               STOP_STATE :
                  begin
						
                  tx <= 1;
                  // Wait CLKS_PER_BIT-1 clock cycles for Stop bit to finish
                  if (counter < (CLKS_PER_BIT-1))
							begin
							counter <= counter + 16'b1;
							state   <= STOP_STATE;
							end
						
                  else
                     begin
							
                     state   <= IDLE_STATE;
                     end
                  end

                  default :
                     state <= IDLE_STATE;

          endcase
         end

////////// Add your code here ///////////////////

//////////////////DO NOT MAKE ANY CHANGES BELOW THIS LINE//////////////////

endmodule