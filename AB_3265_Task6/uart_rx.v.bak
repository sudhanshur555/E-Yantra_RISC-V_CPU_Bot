// AstroTinker Bot : Task 2A : UART Receiver
/*
Instructions
-------------------
Students are not allowed to make any changes in the Module declaration.

This file is used to receive UART Rx data packet from receiver line and then update the rx_msg and rx_complete data lines.

Recommended Quartus Version : 20.1
The submitted project file must be 20.1 compatible as the evaluation will be done on Quartus Prime Lite 20.1.

Warning: The error due to compatibility will not be entertained.
-------------------
*/

/*
Module UART Receiver

Input:  clk_50M - 50 MHz clock
        rx      - UART Receiver

Output: rx_msg      - read incoming message
        rx_complete - message received flag
*/

// module declaration
module uart_rx (
  input clk_50M, rx,
  output reg [7:0] rx_msg,
  output reg rx_complete
);

//////////////////DO NOT MAKE ANY CHANGES ABOVE THIS LINE//////////////////

////////////////////////// Add your code here


localparam CLKS_PER_BIT  = 434;
	
	
	
	localparam IDLE_STATE    = 3'b00;
	localparam START_STATE   = 3'b01;
	localparam GET_BIT_STATE = 3'b10;
	localparam STOP_STATE    = 3'b11;
	
	reg rx_buffer            = 1'b1;
	reg rxt                  = 1'b1;

	reg [1:0]  state         = 0;
	reg [15:0] counter       = 0;
	reg [2:0]  bit_index     = 0; //where to place the next bit (0...7)
//	reg        data_avail    = 0;
	reg [7:0]  data_byte     = 0;
	
	

//	always @(posedge clk_50M)
//		begin
//			rx_complete	<=	data_avail;
//			
//		end
	
initial begin

rx_msg = 0; 
rx_complete = 0;

end
	
	//Double-buffer the incoming RX line. This allows it to be 
	//used in the UART RX Clock Domain and removes problems caused
	//by metastability
	always @(posedge clk_50M)
		begin
		rx_buffer <=	rx;
		rxt			 <=	rx_buffer;
		end
		
	

// The state machine. 
always @(posedge clk_50M) 
	begin
	
		case (state)

		IDLE_STATE :
			begin
			rx_complete	<=	0;
//			data_avail  <= 0;
			counter 		<= 0;
			bit_index	<= 0;
			if (rxt == 0)        // Start bit detected
				state <= START_STATE;
			else
				state <= IDLE_STATE;
			end
			
			
// Wait until the middle of the start bit
			
			START_STATE :
				begin
					if (counter == (CLKS_PER_BIT-1)/2)
					  begin
						if (rxt == 0) // If still low at the middle of the start bit
								begin
									counter  <= 0;
									state 	<= GET_BIT_STATE;
								end
						 else
								begin
									state <= IDLE_STATE;
								end
						 end
						 
					else
						begin
							counter <= counter+16'b1;
							state   <= START_STATE;
						end
				end
				
				
	// Wait CLKS_PER_BIT-1 clock cycles to sample RX for next bit
	
			GET_BIT_STATE :
				begin
					if (counter < CLKS_PER_BIT-1)
						begin
								counter <= counter+16'b1;
								state   <= GET_BIT_STATE;
						end
					else
						begin
							counter                <= 0;
							data_byte[7-bit_index] <= rxt;
						
							//Checked if we have recieved all bits
							if(bit_index < 7)
								begin
									bit_index	<=	bit_index+3'b1;
									state			<=	GET_BIT_STATE;
								end
							
							else
								begin
									bit_index	<=	0;
									state			<=	STOP_STATE;
								end
					end
					
				end
				
		STOP_STATE:
			begin 
				if (counter<(CLKS_PER_BIT+214))
					begin
						counter <= counter+16'b1;
						state   <= STOP_STATE;
					end
				else
					begin
						if(rxt == 0)
							begin
//								data_avail	<=	0;    // Signals that we have a complete byte.
								rx_complete <= 0;
								counter		<=	0;
								state			<=	IDLE_STATE;
								data_byte   <= 0;
								rx_msg	<=	0;
							end
						else
							begin
//								data_avail	<=	1;    // Signals that we have a complete byte.
								counter		<=	0;
								state			<=	IDLE_STATE;
								rx_msg[7:0]	<=	data_byte[0:7];
								rx_complete	<=	1;
							end
					end
				end
				
			default:
			state	<=	IDLE_STATE;
			
		endcase
	end

//////////////////DO NOT MAKE ANY CHANGES BELOW THIS LINE//////////////////

endmodule